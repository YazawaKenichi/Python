#クラスってなんなん？

"""
オブジェクト指向プログラミングにおけるクラスとは

クラス
これから作る「モノ」の定義
例えば
これから作る『モノ』は何を覚えておくことができるか
これから作る『モノ』はどんなことをすることができるのか
といった内容を決めていく。
具体例
クラス名：対話ロボットクラス
おぼえておけること：自分の名前
できること１：自己紹介機能 ＞ 自己紹介ができる
できること２：ねぎらい機能 ＞ ねぎらいの言葉をかけてくれる
オブジェクト指向では「ロボットを設置して仕事をさせるように」プログラミングを進めていく。
ロボットは指示されたことしかできない、よってあらかじめこちら側が提示する命令とその時の処理を決めて利用する。
クラスというのは「これから仕事をしてもらうロボットの設計図」と理解すればわかりやすい。

インスタンス
クラスから作られた実働する「モノ」のこと
クラスは設計図だから、クラスだけでは仕事できない。
実際に動作をさせるにはそこから「実際に動くモノ」を作る必要がある。
これがインスタンス。
つまりインスタンスとは「クラスという設計図から生み出された実際に動くロボット」
クラスからインスタンスを作ることをインスタンス化という。


メソッド
プログラムの一連の処理をまとめたパッケージのようなもの
一連の処理に名前を付けて、あとからその一連の処理を簡単に呼び出せるようにしておく。
言語によっては関数と呼ばれる。
メソッドは独立して道具のように使うこともできれば、クラス内に持つこともできる。
クラス内のメソッドは、「そのクラスから生成されたインスタンスの「できること」」を表す。
つまりインスタンスを作ったら、そいつはメソッドにあらかじめ定義された処理ができるという事。
具体例でいえば、「ねぎらい機能」がメソッドにあたる。
インスタンスを生成すれば、そいつはねぎらい機能が使える。
なぜならクラスを定義したときにねぎらい機能のメソッドも定義しているから。

オブジェクト指向の概念を改めて考えると、オブジェクト指向における設計とは
各クラスの役割などの全体の関係性を決めていくこと。

設計の仕方
システム全体を俯瞰して、それぞれのクラスの役割を考え、全体を最適化できるように決めてプログラミングを進めていく。
ハッカーはこれを頭の中だけで行うことができるので、時間をかけずにコードを量産しても美しく保てる。

"""
