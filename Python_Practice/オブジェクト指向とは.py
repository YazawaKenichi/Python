"""
オブジェクト指向をざっくり理解する。
source https://www.sejuku.net/blog/5973

そもそもプログラムをどうやって表現するかに種類がある。（これをプログラミングパラダイムという）
・命令型プログラミング
・オブジェクト指向プログラミング
    モノを組み立てるように表現して、コンピュータに動作をさせる。（現在の主流）
    例）Java Ruby PHP JavaScript Swift C++ C# VBA
・手続き型プログラミング
    上から下まで単純なルールで文章を読むように動作する。
    例）C
・関数型プログラミング
    数学の関数のイメージでデータに何頭の処理をして答えを取得するように動作する。
・構造化プログラミング
・論理型プログラミング
・制約プログラミング

オブジェクト指向のメリット
オブジェクト指向の使い方のイメージ
オブジェクト指向は、「モノ」と、その「モノができること（役割）」を決める。
プログラムの中では何種類もの「モノ」を用意する。

例）オブジェクト指向プログラミングを用いてすごろくを作るとき
・ゲームマスター（というモノ）
    プレイヤー１やプレイヤー２等に指示を出す。（という役割）
・プレイヤー（というモノ）
    さいころに、さいころを振る指示を出す。（という役割）
・すごろくセット（さいころ、駒、マップ等を含む）#オブジェクト指向プログラミングでは、「モノ」の中に「モノ」を入れる事も可能
    ・マップ（というモノ）
        プレイヤーに「さいころを振る指示」をされたら、「駒」を移動させる。

上記のように、「モノ」に意味を与え、「モノの役割」を作っていく考え方がオブジェクト指向プログラミング
意味を与えた「モノ」という単位で、役割（動作）を決定していけば、わかりやすく開発が進められる。

オブジェクト指向の原則
オブジェクト指向には原則があるらしい
・カプセル化
    できるだけ他のプログラムから干渉されないようにする仕組み
    または
    他のプログラムに干渉しないようにする仕組み
・継承
    再利用性を高める考え方
・ポリモーフィズム
    ふるまいを様々に変えられる仕組み

オブジェクト指向プログラミングでは、「クラス」「メソッド」「インスタンス」を活用することが必須になる。

オブジェクト指向九つのルール
・一つのメソッドにつき、インデントは一段階までにする
・else を使用しない
・すべてのプリミティブ型と文字列型をラップする
・一行につきドットは一つまでにする
・名前を省略しない
・すべてのエンティティを小さくする
・一つのクラスにつきインスタンス変数は二つまでにする
・ファーストクラスコレクションを使用する
・Getter, Setter, プロパティを使用しない
初めのうちはピンとこないが、開発を進めていくうちに大切さがわかってくる。
"""

"""
オブジェクト指向をもう少し深く理解する。
source https://www.sejuku.net/blog/10188

オブジェクト指向とは
一言でいうと「いかに効率よく開発を行うか」

体系立てて説明すると
大規模なシステムやアプリケーション開発では、大量のプログラムを扱っていく
大量のプログラムを扱う上では「わかりやすさ」が重要になってくる。
「わかりやすさ」を実現しているのは「オブジェクト」すなわち「モノ」という概念である。
さらに「モノ」という概念において、「モノ同士の関係性を作っていく考え方」も重要になってくる。
大規模システム -> 大量のプログラム -> わかりやすさが重要 -> モノによって実現 -> モノ同士の関係性を作っていく考え方が重要 -> オブジェクト指向の三大要素が必要
つまり、オブジェクト指向を理解するには、オブジェクト指向の三大要素を理解するのが大事という事になる。
オブジェクト指向の三大要素については次に話す。

「モノ」と「モノ同士の関係性」を考えて作っていくプロセスを「設計」と呼ぶ。
設計するときは、「カプセル化」「継承」「ポリモーフィズム」という考え方が必要になる。
この「カプセル化」「継承」「ポリモーフィズム」の三つがオブジェクト指向の三大要素。
以下、「設計」「カプセル化」「継承」「ポリモーフィズム」の説明


設計
開発を行う時、差磯に設計を行う。

一般的にも設計は非常に重要だが、オブジェクト指向においては最も重要。
あらかじめ開発で扱うデータやふるまいを定義しておいて、それらを上手に効率よく実現するためには設計が必要。
「モノ」のふるまいや定義を設定して、「モノ同士の関係性」を上手に効率よく実現させる仕組みにする事が設計の重要なポイントになる。

設計における注意点
・「モノ」のふるまいや定義が明確で、利用者が増えても理解しやすいモノになっているか
・利用者が増えても使える拡張性の高いものになっているか
・他のオブジェクトとの関係性の中で、データを壊される等のセキュリティ的破綻はないか
・特定の処理に時間がかかってしまうなどのパフォーマンスが低い部分はないか


カプセル化とは
できるだけ他のプログラムから干渉されないようにする仕組みのこと

「モノ同士の関係性」を上手に効率よく実現させるために、他のプログラムと密に関係性を持つ部分と干渉されない部分を明確に分ける必要がある。
カプセル化は他のプログラムから干渉されない部分を明確にする。

プログラムをある程度まとめてカプセル化することで、ほかのプログラムから干渉しづらくなったり、管理しやすくする。

オブジェクト指向のプログラミング言語では、カプセル化を「クラス」というもので実現している。
クラスはプログラミングの中心となるので、設計図とも呼ばれている。


継承
プログラムの再利用性を高める考え方のこと

大規模システムを開発する -> プログラムが大量になる -> 同じようなプログラムも多く含まれるようになる -> プログラムが大量すぎてどれが似ているか見づらくなる -> 修正が面倒くさくなる
面倒くさい修正を一度で済ませられるように、プログラムを一つにまとめる。
それが継承
なんか関数自作して使いまわしたり、ライブラリを include するのと似てる？


ポリモーフィズム
「オブジェクト（モノ）」によってふるまいを様々に変えられる仕組みのこと
ポリモーフィズムは多様性とも呼ばれるらしい。
ポリモーフィズムも再利用性を高める考え方に含まれるらしい。

同じふるまいをする部分は共通化しつつ、違うふるまいにしたい部分は目的に合わせて変えられるのがポリモーフィズム
ポリモーフィズムによって共通化した部分を使いながら、簡単な処理から複雑な処理までぱパフォーマンスの異なる処理をそれぞれの目的に合わせて実行できるようになっている。


結局オブジェクト指向の何が難しいのか
オブジェクト指向は「概念」や「思想」の事
一般的な話、概念や思想は「物事の考え方」を表すから、それを理解し、習得することは難しい。
オブジェクト指向をもっと理解するには、具体的な事例に多く触れていく事が大事になる。

"""
