#クラスの学習
"""
class ClassName(): #class の後にクラス名を指定できる。クラス名は変数を定義するときと同じルール。
    def __init__(self, ): #__init__ と呼ばれる関数が定義されている。これはコンストラクタという、クラスのなかでも重要な機能らしい。
        コンストラクタは __init__() 自体の事
        __hoge__() はコンストラクタとは呼ばないみたい...
        #引数の self はインスタンス自身を指し、基本的にこの引数が必須みたい。
"""
"""
クラスで言うところの class は 関数で言うところの def と同じ
コンストラクタ（__init__()）は、「どのように生成するか」「どのようなデータを持たせるか」といった情報を定義するのに必要なメソッド
引数 self はインスタンス自身を指定、基本的に必須の引数。

「コンストラクタという特別なメソッドの定義」という文言を入門サイトで見つけた。
ということで、コンストラクタ(__init__())はメソッドの一種みたいだ。
"""

#実際のコード

class MyClass():

    #__init__ コンストラクタを作成
    #コンストラクタ引数に self と message を指定
    def __init__(self, message):
        #self はインスタンス自身
        #init の引数１はインスタンス自身を指定
        #引数２は次の value に代入するのに使う

        #MyClass クラスから生成されたインスタンスのデータに
        #message を追加したいから
        #value という属性（アトリビュート）を追加
        self.value = message
        #self がインスタンス自身で、value 属性に
        #message を代入することはわかった。
        #Python では定義と代入を同時にできるから
        #self.value とすることで定義され、
        #同時にそこに message を代入している
        #しかしなんなんだ __init__(self, message) ってのは
        #class MyClass(self, message) ならもう少し予想できそうだけど
        """MyClass(引数) と、クラスに引数を入れると、引数はクラスになる"""
        """ClassA(ClassB) とすることで、ClassA は ClassB を継承することになる"""
        """そうか、クラスの引数は継承を表現するのか"""
        """それで、クラスのデータを定義するコンストラクタに、引数が必要になるのか"""

#インスタンスを代入する変数名＝クラス名（引数）
#こうやってクラスを呼び出してインスタンスを生成する
myinstance = MyClass("Hello, World!") #myinstance 変数を定義し、MyClass クラスを格納。
#インスタンスを代入した変数が myinstance
#MyClass("Hell, World!") とすることでインスタンスを生成した
#このクラスを呼び出すときの引数ってなんなん？

#myinstance の value 属性を出力する
#myinstance は 一つ上の行で MyClass から生成されている
#このインスタンスには value 属性が追加されている
print(myinstance.value) #MyClass の value データを出力する。

#インスタンスの意味が分からないからコードの意味を推測しにくすぎる...
#インスタンスはクラスという設計図から作った「モノ」のこと

